datatype formula =
  TRUE
  | FALSE
  | NOT of formula
  | ANDALSO of formula * formula
  | ORELSE of formula * formula
  | IMPLY of formula * formula
  | LESS of expr * expr
and expr =
  NUM of int
  | PLUS of expr * expr
  | MINUS of expr * expr;

fun exp_eval (NUM n) = n
  | exp_eval (PLUS (e1, e2)) = (exp_eval e1) + (exp_eval e2)
  | exp_eval (MINUS (e1, e2)) = (exp_eval e1) - (exp_eval e2);

fun f final_op nil = final_op ()
  | f final_op (x::xs) = x * f final_op xs;

fun test 0 = nil
  | test n = n::(test (n-1));

fun cool_func n () = n;

fun test_a_ x 1 = 1
  | test_a_ x 2 = 3
  | test_a_ x n = n;

fun test_b_ x n = n;

fun test_a n = f (cool_func (test_a_ (n + 1) n)) (test n)
fun test_b n = f (cool_func (test_b_ (n * 4) n)) (test n);

val x = ["hello"];
val [x] = x;
val y = ["DD", "d", x];

fun sub_a l = case l of [] => 0 | (_::xs) => op+ (1, (sub_a xs))

fun test_a l = (sub_a l) > 1;

nonfix + <>;
infix 4 <>;

fun sub_b ([]:string list) = if true andalso true then 0 else 1
  | sub_b (x::xs) = if xs = y andalso x <> "bye" then 1 else +(1, (sub_b xs));

fun test_b l = ((sub_b l) > 1) andalso false orelse ((sub_b l) > 1);

fun main n = (f (fn () => 5) ([1,2,3,4,5]:int list)) >= 100;