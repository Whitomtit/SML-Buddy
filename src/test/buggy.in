datatype formula =
  TRUE
  | FALSE
  | NOT of formula
  | ANDALSO of formula * formula
  | ORELSE of formula * formula
  | IMPLY of formula * formula
  | LESS of expr * expr
and expr =
  NUM of int
  | PLUS of expr * expr
  | MINUS of expr * expr;

fun exp_eval (NUM n) = n
  | exp_eval (PLUS (e1, e2)) = (exp_eval e1) + (exp_eval e2)
  | exp_eval (MINUS (e1, e2)) = (exp_eval e1) - (exp_eval e2);

fun eval TRUE = true
  | eval FALSE = false
  | eval (NOT f) = not (eval f)
  | eval (ANDALSO(f1,f2)) = (eval f1) andalso (eval f2)
  | eval (ORELSE(f1,f2)) = (eval f1) orelse (eval f2)
  | eval (IMPLY(f1,f2)) = not (eval f1) orelse (eval f2)
  | eval (LESS(e1,e2)) = (exp_eval e1) < (exp_eval e2);

fun max [] = #3 (0,0,~999)
  | max (h::t) = if h > (max t) then h else max t;

datatype lst = Int of int | App of (lst * lst);

fun map (f, (Int n)) = if n > 0 then Int (f n) else Int n
  | map (f, (App(a, b))) = App (map (f, a), map (f, b));

fun f final_op nil = final_op ()
  | f final_op (x::xs) = x * f final_op xs;

fun cool_func n () = n;

val x = ["hello"];
val [x] = x;
val y = ["DD", "d", x];

nonfix + <>;
infix 4 <>;

fun sub_b ([]:string list) = if true andalso true then 0 else 1
  | sub_b (x::xs) = if xs = y andalso x <> "bye" then 1 else +(1, (sub_b xs));

fun test l = ((sub_b l) > 1) andalso false orelse ((sub_b l) > 1);